# Querying

```elixir
Mix.install([:ash])
```

## Querying

<div class="flex items-center w-full flex-start justify-between rounded-xl p-4" style="background-color: #f0f5f9; color: #61758a;">
<div class="flex">
<i class="ri-arrow-left-fill"></i>
<a class="flex ml-2" style="color: #61758a;" href="data_persistence.livemd">Data Persistence</a>
</div>
<div class="flex">
<i class="ri-home-fill"></i>
<a class="flex ml-2" style="color: #61758a;" href="overview.livemd">Home</a>
</div>
<div class="flex">
<a class="flex mr-2" style="color: #61758a;" href="attributes.livemd">Attributes</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>

### In this tutorial you will do basic Query and CRUD operations

But first you need to enable all basic **CRUD** operations.

Do this by adding the `:read`, `:update` and `:destroy` action to your actions.

<details class="rounded-lg my-4" style="background-color: #96ef86; color: #040604;">
  <summary class="cursor-pointer font-bold p-4"></i>Show Solution</summary>
  <div class="p-4">

  ```elixir
  defmodule Tutorial.Profile do
    use Ash.Resource,
      data_layer: Ash.DataLayer.Ets

    actions do
      defaults [:create, :read, :update, :destroy]
    end

    attributes do
      uuid_primary_key :id
      attribute :name, :string
    end
  end

  defmodule Tutorial do
    use Ash.Api

    resources do
      resource Tutorial.Profile
    end
  end
  ```

  </div>
</details>

### Enter your solution

```elixir
defmodule Tutorial.Profile do
  use Ash.Resource,
    data_layer: Ash.DataLayer.Ets

  actions do
    defaults([:create])
  end

  attributes do
    uuid_primary_key(:id)
    attribute(:name, :string)
  end
end

defmodule Tutorial do
  use Ash.Api

  resources do
    resource(Tutorial.Profile)
  end
end
```

## Creating

Add 2 Profiles to the database.

* One with the name "Joe Armstrong"
* One with your name

You can create a `Profile` by:

* Creating a Changeset with `Ash.Changeset.for_create(Tutorial.Profile, :create, %{name: "Your Name"})`,
* Then giving the changeset to `Tutorial.create!()`.

*Hint: Use a pipeline*

<details class="rounded-lg my-4" style="background-color: #96ef86; color: #040604;">
  <summary class="cursor-pointer font-bold p-4"></i>Show Solution</summary>
  <div class="p-4">

  ```elixir
  Tutorial.Profile
  |> Ash.Changeset.for_create(:create, %{name: "The Name"})
  |> Tutorial.create!()
  ```

  </div>
</details>

**Enter your solution**

```elixir

```

## Reading

Now, read all the generated Profiles.

Call `Tutorial.read!/1` with the `Tutorial.Profile` module.

<details class="rounded-lg my-4" style="background-color: #96ef86; color: #040604;">
  <summary class="cursor-pointer font-bold p-4"></i>Show Solution</summary>
  <div class="p-4">

  ```elixir
  Tutorial.Profile
  |> Tutorial.read!()
  ```

  </div>
</details>

**Enter your solution**

```elixir

```

Now fetch the "Joe Armstrong" Profile.

You can achieve this by introducing a filter.

First you'll need to `require Ash.Query`

Then call `Ash.Query.filter(name == "Joe Armstrong")` with the `Tutorial.Profile`.

Put the result into the `joe` variable. `read!/1` returns a list, so make sure to extract the single returned value out of that list.

<details class="rounded-lg my-4" style="background-color: #96ef86; color: #040604;">
  <summary class="cursor-pointer font-bold p-4"></i>Show Solution</summary>
  <div class="p-4">

  ```elixir
  require Ash.Query

  [joe] = 
    Tutorial.Profile
    |> Ash.Query.filter(name == "Joe Armstrong")
    |> Tutorial.read!()
  ```

  </div>
</details>

**Enter your solution**

```elixir

```

You'll use the `joe` variable in the next sections.

## Updating

Now change `Joe Armstrong`'s name to `Neil Armstrong`.

You can do this by providing the `Ash.Changeset.for_update/3` with:

* the resource you want to change, in this case `joe`
* the `:update` atom
* a map of the values you want to change, in this case `%{name: "Neil Armstrong"}`

Then apply the changeset by calling `Tutorial.update!/1` with the changeset.

*Hint: Using a pipeline might be a good idea.*

<details class="rounded-lg my-4" style="background-color: #96ef86; color: #040604;">
  <summary class="cursor-pointer font-bold p-4"></i>Show Solution</summary>
  <div class="p-4">

  ```elixir
  joe
  |> Ash.Changeset.for_update(:update, %{name: "Neil Armstrong"})
  |> Tutorial.update!()
  ```

  </div>
</details>

**Enter your solution**

```elixir

```

## Destroying

Finally, remove `joe` from the database.

Do this using the `Tutorial.destroy!/1` function.

<details class="rounded-lg my-4" style="background-color: #96ef86; color: #040604;">
  <summary class="cursor-pointer font-bold p-4"></i>Show Solution</summary>
  <div class="p-4">

  ```elixir
  Tutorial.destroy!(joe)
  ```

  </div>
</details>

**Enter your solution**

```elixir

```

<div class="flex items-center w-full flex-start justify-between rounded-xl p-4" style="background-color: #f0f5f9; color: #61758a;">
<div class="flex">
<i class="ri-arrow-left-fill"></i>
<a class="flex ml-2" style="color: #61758a;" href="data_persistence.livemd">Data Persistence</a>
</div>
<div class="flex">
<i class="ri-home-fill"></i>
<a class="flex ml-2" style="color: #61758a;" href="overview.livemd">Home</a>
</div>
<div class="flex">
<a class="flex mr-2" style="color: #61758a;" href="attributes.livemd">Attributes</a>
<i class="ri-arrow-right-fill"></i>
</div>
</div>
