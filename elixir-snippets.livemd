# Random Snippets

## Sorting list of maps with custom sort

```elixir
[%{name: "asdf9"}, %{name: "zzzzzzzz1"}, %{name: "2"}, %{name: "55"}, %{name: "3iiijij4"}]
|> Enum.sort_by(
  fn lm_rule ->
    lm_rule.name
    |> String.replace(~r/\D/, "")
    |> case do
      "" -> ""
      name -> String.to_integer(name)
    end
  end,
  :asc
)
```

## Random subset

```elixir
defmodule Test do
  # list of elements, n, random subset
  def random_subset(list, n) when is_list(list) and length(list) >= n do
    {new_list, _} =
      Enum.reduce(1..n, {[], list}, fn _item, acc ->
        {new_list, old_list} = acc

        length = length(old_list)
        random_index = :rand.uniform(length) - 1
        {item, old_list} = List.pop_at(old_list, random_index)

        {[item | new_list], old_list}
      end)

    new_list
  end

  def random_subset(list, _n) do
    list
  end
end

IO.inspect(Test.random_subset([], 2))
IO.inspect(Test.random_subset([1], 3))
IO.inspect(Test.random_subset([1, 2, 3], 2))
IO.inspect(Test.random_subset([1, 2, 3, 4, 5, 6], -1))
IO.inspect(Test.random_subset(["asdf", 24, "iaojsdf", false], 3))
IO.inspect(Test.random_subset(123, 4))
```
